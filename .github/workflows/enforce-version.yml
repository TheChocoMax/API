name: Enforce Correct Version Update

permissions:
  contents: read
  statuses: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'
      - '!**/tests/**'

jobs:
  version-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed Python files and API version
        id: detect
        run: |
          echo "üîç Checking for changed Python files (excluding tests)..."

          git fetch origin main
          BASE_SHA=$(git merge-base HEAD origin/main)

          # List changed Python files (excluding tests)
          CHANGED=$(git diff --name-only "$BASE_SHA"...HEAD | grep '\.py$' | grep -v 'test' || true)
          echo "Changed files:"
          echo "$CHANGED"

          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$CHANGED" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Extract unique version folders like v1, v2
          VERSIONS=$(echo "$CHANGED" | sed -n 's|^app/routes/\(v[0-9]\+\)/.*|\1|p' | sort -u | tr '\n' ' ')
          echo "Detected version folders with changes: $VERSIONS"
          echo "VERSIONS=$VERSIONS" >> "$GITHUB_ENV"

      - name: Verify version changes and summarize
        run: |
          echo "üìã Running version enforcement checks..."

          git fetch origin main
          BASE_SHA=$(git merge-base HEAD origin/main)

          REPORT=""
          EXIT_CODE=0

          # Check version folders
          for v in $VERSIONS; do
            echo "‚û° Checking app/routes/$v/__init__.py"
            VERSION_CHANGED=$(git diff "$BASE_SHA"...HEAD -- "app/routes/$v/__init__.py" | grep '__version__ = ' || true)

            if [ -z "$VERSION_CHANGED" ]; then
              REPORT+="üõë Version $v was modified, but __version__ was not updated in app/routes/$v/__init__.py\n"
              EXIT_CODE=1
            else
              REPORT+="‚úÖ app/routes/$v/__init__.py includes a version change.\n"
            fi
          done

          # If any .py files changed, enforce version.py update
          if [ -n "$CHANGED_FILES" ]; then
            echo "‚û° Checking if __version__ was updated in app/version.py"
            VERSION_PY_CHANGED=$(git diff "$BASE_SHA"...HEAD -- "app/version.py" | grep '__version__ = ' || true)

            if [ -z "$VERSION_PY_CHANGED" ]; then
              REPORT+="üõë Python code was changed, but __version__ was not updated in app/version.py\n"
              EXIT_CODE=1
            else
              REPORT+="‚úÖ app/version.py includes a version change.\n"
            fi
          fi

          echo -e "\n==== Version Check Report ===="
          echo -e "$REPORT"
          echo "================================"

          exit $EXIT_CODE
